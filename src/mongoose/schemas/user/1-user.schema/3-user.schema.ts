import { Prop, Schema } from '@nestjs/mongoose';
import { CollationOptions } from 'mongoose';

export const userCollation: CollationOptions = { locale: 'en_US', strength: 2 };

@Schema({
    collation: userCollation,
    toJSON: { virtuals: true },
    toObject: { virtuals: true, getters: true },
    timestamps: true,
})
// DataAtPlugin and IsDeletedPlugin will be created in a seperate file.
export class User implements DateAtPlugin, IsDeletedPlugin {
    // This is a login subdocument, and subdocument will be created in a seperate file.
    @Prop({ type: getLoginSchema() })
    login: LoginDocument;

    // This is a name subdocument, and subdocument will be created in a seperate file.
    // As you can see required flag is on.
    @Prop({ type: getNameSchema(), required: true })
    name: NameDocument;


    // This is an email subdocument, and subdocument will be created in a seperate file.
    @Prop({ type: [getEmailSchema()] })
    emails: EmailDocument[];


    // roles will indicate current user's role
    // There can be more than one role, so it's type is array of string
    // Mongoose will only allow string in enum, and enum will be created in a sperate file.
    // We assign a default value Role.User
    @Prop({
        type: [String],
        enum: [Role.Admin, Role.User],
        default: Role.User,
    })
    roles: Role[];

    // avatar will keep an url of image of current user.
    @Prop({ type: String })
    avatar: string;

    // socialMediaHandles will keep a social username when a user enable social logins
    @Prop({ type: Map, of: String, default: {} })
    socialMediaHandles: Map<string, string>;

    // Enabling immutable will prevent modification.
    @Prop({ type: Date, immutable: true })
    createdAt: Date;

    id: string;

    // We don't have prop decorator for updatedAt because timestamps flag is doing all the work behind the scene.
    updatedAt: Date;

    // These are virtuals and will come from DateAtPlugin
    // Virtuals are generated by memory and not stored to database.
    createdDate: string;
    createdTime: string;
    updatedDate: string;
    updatedTime: string;

    // Implementation will happen in IsDeletedPlugin
    isDeleted: boolean;
}